services:
  - type: web
    name: my-frontend
    runtime: docker
    repo: ./frontend
    buildCommand: docker build ./frontend -t my-frontend
    startCommand: docker run -p 3456:80 --network=my-network --name my-frontend my-frontend
    dependsOn:
      - my-java
    envVars:
      - key: SPRING_DATASOURCE_URL
        value: jdbc:postgresql://postgres:5432/Secret-server
      - key: SPRING_DATASOURCE_USERNAME
        value: postgres
      - key: SPRING_DATASOURCE_PASSWORD
        value: postgres

  - type: web
    name: my-java
    runtime: docker
    repo: ./backend
    buildCommand: docker build ./backend -t my-java
    startCommand: docker run --network=my-network --name my-java my-java
    dependsOn:
      - postgres
    envVars:
      - key: SPRING_DATASOURCE_URL
        value: jdbc:postgresql://postgres:5432/Secret-server
      - key: SPRING_DATASOURCE_USERNAME
        value: postgres
      - key: SPRING_DATASOURCE_PASSWORD
        value: postgres

  - type: web
    name: postgres
    runtime: docker
    repo: postgres:latest
    buildCommand: docker pull postgres:latest
    startCommand: >
      docker run --network=my-network --name postgres
      -e POSTGRES_DB=Secret-server
      -e POSTGRES_USER=postgres
      -e POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  - name: my-network
